import { supabase } from './supabase'

export interface Project {
  id?: string
  title: string
  description: string
  location?: string
  status: 'planning' | 'active' | 'completed'
  progress: number
  start_date: string
  end_date: string
  deadline?: string
  thematic: string
  pole: string
  created_by?: string
  created_at?: string
  updated_at?: string
  is_private_for_visitors?: boolean
}

export interface ProjectEmployee {
  id?: string
  project_id: string
  employee_name: string
  created_at?: string
}

export interface ProjectPartner {
  id?: string
  project_id: string
  partner_name: string
  created_at?: string
}

export interface ProjectThematic {
  id?: string
  project_id: string
  thematic_name: string
  created_at?: string
}

// R√©cup√©rer tous les projets avec pagination
export async function getProjects(limit = 10, offset = 0): Promise<Project[]> {
  try {
    const { data, error } = await supabase
      .from('projects')
      .select('id, title, description, status, progress, start_date, end_date, thematic, pole, created_at')
      .order('created_at', { ascending: false })
      .range(offset, offset + limit - 1)

    if (error) {
      console.error('Erreur lors de la r√©cup√©ration des projets:', error)
      return []
    }

    return data || []
  } catch (error) {
    console.error('Erreur inattendue lors de la r√©cup√©ration des projets:', error)
    return []
  }
}

// R√©cup√©rer un projet par ID avec ses employ√©s et partenaires
export async function getProjectById(id: string): Promise<Project & { employees: string[], partners: string[], thematics: string[] } | null> {
  try {
    // R√©cup√©rer le projet
    const { data: project, error: projectError } = await supabase
      .from('projects')
      .select('*')
      .eq('id', id)
      .single()

    if (projectError) {
      console.error('Erreur lors de la r√©cup√©ration du projet:', projectError)
      return null
    }

    // R√©cup√©rer les employ√©s
    const { data: employees, error: employeesError } = await supabase
      .from('project_employees')
      .select('employee_name')
      .eq('project_id', id)

    if (employeesError) {
      console.error('Erreur lors de la r√©cup√©ration des employ√©s:', employeesError)
    }

    // R√©cup√©rer les partenaires
    const { data: partners, error: partnersError } = await supabase
      .from('project_partners')
      .select('partner_name')
      .eq('project_id', id)

    if (partnersError) {
      console.error('Erreur lors de la r√©cup√©ration des partenaires:', partnersError)
    }

    // R√©cup√©rer les th√©matiques
    const { data: thematics, error: thematicsError } = await supabase
      .from('project_thematics')
      .select('thematic_name')
      .eq('project_id', id)

    if (thematicsError) {
      console.error('Erreur lors de la r√©cup√©ration des th√©matiques:', thematicsError)
    }

    return {
      ...project,
      employees: employees?.map(e => e.employee_name) || [],
      partners: partners?.map(p => p.partner_name) || [],
      thematics: thematics?.map(t => t.thematic_name) || []
    }
  } catch (error) {
    console.error('Erreur inattendue lors de la r√©cup√©ration du projet:', error)
    return null
  }
}

// Cr√©er un nouveau projet
export async function createProject(projectData: Omit<Project, 'id' | 'created_at' | 'updated_at'>, employees: string[], partners: string[], thematics: string[] = []): Promise<Project | null> {
  try {
    console.log('üîç createProject - D√©but')
    console.log('üìä projectData:', projectData)
    console.log('üë§ created_by:', projectData.created_by)
    
    // V√©rifier que les donn√©es requises sont pr√©sentes
    if (!projectData.title || !projectData.description || !projectData.start_date || !projectData.end_date) {
      console.error('‚ùå Donn√©es manquantes pour la cr√©ation du projet')
      return null
    }

    // Pr√©parer les donn√©es d'insertion
    const insertData = {
      title: projectData.title,
      description: projectData.description,
      location: projectData.location || '',
      status: projectData.status,
      progress: projectData.progress || 0,
      start_date: projectData.start_date,
      end_date: projectData.end_date,
      thematic: projectData.thematic || '',
      pole: projectData.pole || 'TOUS',
      created_by: projectData.created_by,
      is_private_for_visitors: projectData.is_private_for_visitors || false
    }
    
    console.log('üìù Donn√©es pr√©par√©es pour insertion:', insertData)

    // Ins√©rer le projet principal avec timeout court
    console.log('üöÄ Tentative d\'insertion du projet principal...')
    
    const { data: project, error: projectError } = await supabase
      .from('projects')
      .insert(insertData)
      .select()
      .single()
    
    console.log('üìã R√©sultat de l\'insertion:', { project, error: projectError })
    
    if (projectError) {
      console.error('‚ùå Erreur lors de la cr√©ation du projet:', projectError)
      console.error('‚ùå Code d\'erreur:', projectError.code)
      console.error('‚ùå Message d\'erreur:', projectError.message)
      return null
    }

    if (!project) {
      console.error('‚ùå Aucun projet retourn√© apr√®s insertion')
      return null
    }

    console.log('‚úÖ Projet cr√©√© avec succ√®s:', project)

    // Ins√©rer les employ√©s si pr√©sents (en arri√®re-plan)
    if (employees && employees.length > 0) {
      const employeesData = employees.map(employee => ({
        project_id: project.id,
        employee_name: employee.trim()
      })).filter(emp => emp.employee_name.length > 0)

      if (employeesData.length > 0) {
        try {
          await supabase
            .from('project_employees')
            .insert(employeesData)
          console.log('‚úÖ Employ√©s ajout√©s avec succ√®s')
        } catch (error) {
          console.error('‚ùå Erreur lors de l\'ajout des employ√©s:', error)
        }
      }
    }

    // Ins√©rer les partenaires si pr√©sents (en arri√®re-plan)
    if (partners && partners.length > 0) {
      const partnersData = partners.map(partner => ({
        project_id: project.id,
        partner_name: partner.trim()
      })).filter(partner => partner.partner_name.length > 0)

      if (partnersData.length > 0) {
        try {
          await supabase
            .from('project_partners')
            .insert(partnersData)
          console.log('‚úÖ Partenaires ajout√©s avec succ√®s')
        } catch (error) {
          console.error('‚ùå Erreur lors de l\'ajout des partenaires:', error)
        }
      }
    }

    // Ins√©rer les th√©matiques si pr√©sentes (en arri√®re-plan)
    if (thematics && thematics.length > 0) {
      const thematicsData = thematics.map(thematic => ({
        project_id: project.id,
        thematic_name: thematic.trim()
      })).filter(thematic => thematic.thematic_name.length > 0)

      if (thematicsData.length > 0) {
        try {
          await supabase
            .from('project_thematics')
            .insert(thematicsData)
          console.log('‚úÖ Th√©matiques ajout√©es avec succ√®s')
        } catch (error) {
          console.error('‚ùå Erreur lors de l\'ajout des th√©matiques:', error)
        }
      }
    }

    console.log('üéâ createProject - Fin avec succ√®s')
    return project
  } catch (error) {
    console.error('‚ùå Erreur inattendue lors de la cr√©ation du projet:', error)
    if (error instanceof Error) {
      console.error('‚ùå Type d\'erreur:', error.name)
      console.error('‚ùå Message d\'erreur:', error.message)
    }
    return null
  }
}

// Mettre √† jour un projet
export async function updateProject(id: string, updates: Partial<Project>): Promise<Project | null> {
  try {
    const { data, error } = await supabase
      .from('projects')
      .update(updates)
      .eq('id', id)
      .select()
      .single()

    if (error) {
      console.error('Erreur lors de la mise √† jour du projet:', error)
      return null
    }

    return data
  } catch (error) {
    console.error('Erreur inattendue lors de la mise √† jour du projet:', error)
    return null
  }
}

// Supprimer un projet
export async function deleteProject(id: string): Promise<boolean> {
  try {
    console.log('üóëÔ∏è deleteProject - D√©but pour le projet:', id)
    
    // Suppression directe sans v√©rification pr√©alable
    const { error } = await supabase
      .from('projects')
      .delete()
      .eq('id', id)

    if (error) {
      console.error('‚ùå Erreur lors de la suppression du projet:', error)
      console.error('‚ùå Code d\'erreur:', error.code)
      console.error('‚ùå Message d\'erreur:', error.message)
      return false
    }

    console.log('‚úÖ Projet supprim√© avec succ√®s')
    return true
  } catch (error) {
    console.error('‚ùå Erreur inattendue lors de la suppression du projet:', error)
    if (error instanceof Error) {
      console.error('‚ùå Type d\'erreur:', error.name)
      console.error('‚ùå Message d\'erreur:', error.message)
    }
    return false
  }
}

// Mettre √† jour les employ√©s d'un projet
export async function updateProjectEmployees(projectId: string, employees: string[]): Promise<boolean> {
  try {
    // Supprimer les employ√©s existants
    const { error: deleteError } = await supabase
      .from('project_employees')
      .delete()
      .eq('project_id', projectId)

    if (deleteError) {
      console.error('Erreur lors de la suppression des employ√©s:', deleteError)
      return false
    }

    // Ajouter les nouveaux employ√©s avec gestion des conflits
    if (employees && employees.length > 0) {
      const employeesData = employees.map(employee => ({
        project_id: projectId,
        employee_name: employee.trim()
      })).filter(emp => emp.employee_name.length > 0)

      if (employeesData.length > 0) {
        const { error: insertError } = await supabase
          .from('project_employees')
          .upsert(employeesData, { 
            onConflict: 'project_id,employee_name',
            ignoreDuplicates: true 
          })

        if (insertError) {
          console.error('Erreur lors de l\'ajout des employ√©s:', insertError)
          return false
        }
      }
    }

    return true
  } catch (error) {
    console.error('Erreur inattendue lors de la mise √† jour des employ√©s:', error)
    return false
  }
}

// Mettre √† jour les partenaires d'un projet
export async function updateProjectPartners(projectId: string, partners: string[]): Promise<boolean> {
  try {
    // Supprimer les partenaires existants
    const { error: deleteError } = await supabase
      .from('project_partners')
      .delete()
      .eq('project_id', projectId)

    if (deleteError) {
      console.error('Erreur lors de la suppression des partenaires:', deleteError)
      return false
    }

    // Ajouter les nouveaux partenaires avec gestion des conflits
    if (partners && partners.length > 0) {
      const partnersData = partners.map(partner => ({
        project_id: projectId,
        partner_name: partner.trim()
      })).filter(partner => partner.partner_name.length > 0)

      if (partnersData.length > 0) {
        const { error: insertError } = await supabase
          .from('project_partners')
          .upsert(partnersData, { 
            onConflict: 'project_id,partner_name',
            ignoreDuplicates: true 
          })

        if (insertError) {
          console.error('Erreur lors de l\'ajout des partenaires:', insertError)
          return false
        }
      }
    }

    return true
  } catch (error) {
    console.error('Erreur inattendue lors de la mise √† jour des partenaires:', error)
    return false
  }
}

// Mettre √† jour les th√©matiques d'un projet
export async function updateProjectThematics(projectId: string, thematics: string[]): Promise<boolean> {
  try {
    // Supprimer les th√©matiques existantes
    const { error: deleteError } = await supabase
      .from('project_thematics')
      .delete()
      .eq('project_id', projectId)

    if (deleteError) {
      console.error('Erreur lors de la suppression des th√©matiques:', deleteError)
      return false
    }

    // Ajouter les nouvelles th√©matiques avec gestion des conflits
    if (thematics && thematics.length > 0) {
      const thematicsData = thematics.map(thematic => ({
        project_id: projectId,
        thematic_name: thematic.trim()
      })).filter(thematic => thematic.thematic_name.length > 0)

      if (thematicsData.length > 0) {
        const { error: insertError } = await supabase
          .from('project_thematics')
          .upsert(thematicsData, { 
            onConflict: 'project_id,thematic_name',
            ignoreDuplicates: true 
          })

        if (insertError) {
          console.error('Erreur lors de l\'ajout des th√©matiques:', insertError)
          return false
        }
      }
    }

    return true
  } catch (error) {
    console.error('Erreur inattendue lors de la mise √† jour des th√©matiques:', error)
    return false
  }
}

// R√©cup√©rer les projets avec leurs employ√©s et partenaires pour les statistiques
export async function getProjectsWithDetails(limit = 100, offset = 0): Promise<(Project & { employees: string[], partners: string[], thematics: string[] })[]> {
  try {
    // R√©cup√©rer tous les projets
    const { data: projects, error: projectsError } = await supabase
      .from('projects')
      .select('*')
      .order('created_at', { ascending: false })
      .range(offset, offset + limit - 1)

    if (projectsError) {
      console.error('Erreur lors de la r√©cup√©ration des projets:', projectsError)
      return []
    }

    if (!projects || projects.length === 0) {
      return []
    }

    // R√©cup√©rer les employ√©s pour tous les projets
    const { data: employees, error: employeesError } = await supabase
      .from('project_employees')
      .select('project_id, employee_name')
      .in('project_id', projects.map(p => p.id))

    if (employeesError) {
      console.error('Erreur lors de la r√©cup√©ration des employ√©s:', employeesError)
    }

    // R√©cup√©rer les partenaires pour tous les projets
    const { data: partners, error: partnersError } = await supabase
      .from('project_partners')
      .select('project_id, partner_name')
      .in('project_id', projects.map(p => p.id))

    if (partnersError) {
      console.error('Erreur lors de la r√©cup√©ration des partenaires:', partnersError)
    }

    // R√©cup√©rer les th√©matiques pour tous les projets
    const { data: thematics, error: thematicsError } = await supabase
      .from('project_thematics')
      .select('project_id, thematic_name')
      .in('project_id', projects.map(p => p.id))

    if (thematicsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des th√©matiques:', thematicsError)
      console.error('‚ùå Code d\'erreur:', thematicsError.code)
      console.error('‚ùå Message d\'erreur:', thematicsError.message)
      console.error('‚ùå D√©tails:', thematicsError.details)
    } else {
      console.log('‚úÖ Th√©matiques r√©cup√©r√©es avec succ√®s:', thematics?.length || 0, 'th√©matiques trouv√©es')
    }

    // Combiner les donn√©es
    return projects.map(project => ({
      ...project,
      employees: employees?.filter(e => e.project_id === project.id).map(e => e.employee_name) || [],
      partners: partners?.filter(p => p.project_id === project.id).map(p => p.partner_name) || [],
      thematics: thematics?.filter(t => t.project_id === project.id).map(t => t.thematic_name) || []
    }))
  } catch (error) {
    console.error('Erreur inattendue lors de la r√©cup√©ration des projets avec d√©tails:', error)
    return []
  }
} 

// Fonction pour nettoyer automatiquement tous les doublons dans tous les projets
export async function cleanAllProjectDuplicates(): Promise<boolean> {
  try {
    console.log('üßπ cleanAllProjectDuplicates - D√©but')
    
    // R√©cup√©rer tous les projets
    const { data: projects, error: projectsError } = await supabase
      .from('projects')
      .select('id, title')

    if (projectsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des projets:', projectsError)
      return false
    }

    if (!projects || projects.length === 0) {
      console.log('‚ÑπÔ∏è Aucun projet trouv√©')
      return true
    }

    console.log(`üìä Nettoyage des doublons pour ${projects.length} projets`)

    let successCount = 0
    let errorCount = 0

    // Nettoyer chaque projet
    for (const project of projects) {
      try {
        // Utiliser les fonctions de mise √† jour qui g√®rent d√©j√† les doublons
        const employeesSuccess = await updateProjectEmployees(project.id, [])
        const partnersSuccess = await updateProjectPartners(project.id, [])
        const thematicsSuccess = await updateProjectThematics(project.id, [])
        
        if (employeesSuccess && partnersSuccess && thematicsSuccess) {
          successCount++
          console.log(`‚úÖ Projet "${project.title}" nettoy√©`)
        } else {
          errorCount++
          console.log(`‚ùå Erreur lors du nettoyage du projet "${project.title}"`)
        }
      } catch (error) {
        errorCount++
        console.error(`‚ùå Erreur lors du nettoyage du projet "${project.title}":`, error)
      }
    }

    console.log(`üìä R√©sultat du nettoyage global:`)
    console.log(`  - Projets nettoy√©s avec succ√®s: ${successCount}`)
    console.log(`  - Erreurs: ${errorCount}`)
    console.log(`  - Total: ${projects.length}`)

    return errorCount === 0
  } catch (error) {
    console.error('‚ùå Erreur inattendue lors du nettoyage global:', error)
    return false
  }
} 